#include <iostream>
#define max 50
using namespace std;
struct node{
    string keyword;
    string meaning;
    node *lchild;
    node *rchild;
};

struct node *create() {
    node *root=new node;
    int ch;
    string x,y,d,d2;
    cout << "enter the value of root keyword : ";
    cin >> x;
    cout << "enter the value of root meaning : ";
    cin >> y;
    if (x == "-1")
        return NULL;


    root->keyword = x;
    root->lchild=NULL;
    root->rchild=NULL;


    do{
        bool flag=0;
        node *temp = root;
        cout<<"enter keyword node : ";
        cin>>d;
        cout<<"enter meaning node : ";
        cin>>d2;
        node *curr = new node;
        curr->keyword = d;

        while (flag == 0)
        {
            if (curr->keyword < temp->keyword)
            {
                if (temp->lchild == NULL)
                {
                    temp->lchild = curr;
                    flag = 1;
                }
                else
                    temp= temp->lchild;

            }
            else{
                if (temp->rchild == NULL) {
                    temp->rchild = curr;
                    flag = 1;
                }
                else
                    temp = temp->rchild;

            }

        }

        cout << "do you want to add another node 0/1 : ";
        cin >> ch;
    }while(ch==1);
    return root;
}

struct node *search(node *root,string x){


    if(root == NULL) {
        return 0 ;
    }
    struct node *temp=new node;
    temp=root;

    int flag=0;
    while(flag==0 and temp!=NULL){
        if(temp->keyword==x){
            flag=6;
            break;
        }
        else{
            if(x<temp->keyword){
                temp=temp->lchild;

            }
            else{
                temp=temp->rchild;
            }
        }
    }
    if(flag==6)
        cout<<"search is successfull";

    else
        cout << "not found";


}
void inorder(node *root)
{
    if(root==NULL){
        return ;
    }
    inorder(root->lchild);
    cout<<root->keyword<<"\t";
    inorder(root->rchild);

}
struct node *copy_r(struct node *root){
    node *temp=new node;
    temp=NULL;
    if(root!=NULL){
        node *temp=new node;
        temp->keyword=root->keyword;
        temp->lchild=copy_r(root->lchild);
        temp->rchild=copy_r(root->rchild);
    }

    return temp;
}
void mirror_r(struct node *root){
    node *temp=new node;
    if(root==NULL){
        return ;
    }
    else{

        temp=root->lchild;
        root->lchild=root->rchild;
        root->rchild=temp;
        mirror_r(root->lchild);
        mirror_r(root->rchild);
    }
    //return root;


}
struct node *min_nr(struct node *ptr){
    if(ptr!=NULL)
        while(ptr->rchild!=NULL)
            ptr=ptr->rchild;

    return ptr;
}
struct node *delete_r(node *root,string key) {
    if (root == NULL) {
        return NULL;
    } else if (key < root->keyword) {
        root->lchild = delete_r(root->lchild, key);
    } else if (key > root->keyword) {
        root->rchild = delete_r(root->rchild, key);
    } else if (key == root->keyword) {
        if (root->lchild == NULL && root->rchild == NULL) {
            delete root;
            root = NULL;
        } else if (root->rchild == NULL) {
            node *temp = new node;
            temp = root;
            root = root->lchild;
            delete temp;

        } else if (root->lchild == NULL) {
            node *temp = new node;
            temp = root;
            root = root->rchild;
            delete temp;
        } else {
            node *temp = new node;
            temp = min_nr(root->rchild);
            root->keyword = temp->keyword;
            root->rchild = delete_r(root->rchild, temp->keyword);
        }
    }
    return root;
}
struct node *queue[max];
int front=-1;
int rear=-1;
void push_queue(struct node *item){
    if(rear==max-1){
        cout<<"queue overflow";
        return;
    }
    if(front==-1) {
        front = 0;
    }
    rear=rear+1;
    queue[rear]=item;

}
struct node  *pop_queue(){
    struct node *item;
    if(front==-1 || front==rear+1){
        cout<<"queue underflow";
        return 0 ;
    }
    item=queue[front];
    front=front+1;
    return item;
}
int queue_empty(){
    if(front==-1 || front==rear+1)
        return 1;
    else
        return 0;
}
void bst_level(struct node *root){
    struct node *temp = new node;
    temp=root;
    if(temp==NULL){
        return;
    }
    else {
        push_queue(temp);
        while (queue_empty() == false) {
            temp = queue[front];

            cout << temp->keyword <<"\t";
             temp=pop_queue();
            if (temp->lchild != NULL)
                push_queue(temp->lchild);
            if (temp->rchild != NULL)
                push_queue(temp->rchild);
        }
    }
}

int main()
{
    struct node *p=new node;
    struct node *temp=new node;
    int ch,c;
    string n,a;
    do{
        cout<<"****choice******"<<endl;
        cout<<"1.create \n 2. search\n 3. inorder\n 4.level order\n5.delete\n6.copy \n7.mirror"<<endl;
        cin>>ch;
        switch(ch){
            case 1:
                p=create();
                break;
            case 2:
                cout<<"enter the element to be search : ";
                cin>>n;
                p=search(p,n);
                break;
            case 3:
                inorder(p);
                break;
            case 4:
                bst_level(p);
                break;

            case 5:
                cout<<"enter the node to be delete : ";
                cin>>a;
                delete_r(p,a);
                break;
            case 6:
                p=copy_r(p);

                break;
            case 7:
                mirror_r(p);

                break;


        }
        cout<<"\ndo you want to perform another operation 0/1 : ";
        cin>>c;
    }while(c==1);

return 0;


}
/*#include <iostream>
#include <queue>
using namespace std;
struct node{
    string key, value;
    struct node *lchild, *rchild;
};
typedef struct node node;
node* create()
{
    node *root = new node;
    char ch;
    node *temp, *curr;
    root->lchild = NULL;
    root->rchild = NULL;
    cout<<"Enter the key of root:";
    cin>>root->key;
    cout<<endl<<"Enter the value of root";
    cin>>root->value;
    do {
        temp = root;
        bool flag = 1;
        curr = new node;
        cout<<"Enter key and value pair"<<endl;
        cin>>curr->key>>curr->value;
        curr->lchild =NULL;
        curr->rchild = NULL;
        while (flag == 1)
        {
            if(curr->key < temp->key){
                if(temp->lchild == NULL){
                    temp->lchild = curr;
                    flag = 0;
                }
                else{
                    temp = temp->lchild;
                }
            }
            else{
                if(temp->rchild == NULL){
                    temp->rchild = curr;
                    flag = 0;
                }
                else{
                    temp = temp->rchild;
                }
            }
        }
        cout<<"Do you Want to continue(Y/N)";
        cin>>ch;
    }while(ch == 'Y');
    return root;
}
void inorder(node* root){
    if(root == NULL){
        return;
    }
    inorder(root->lchild);
    cout<<root->key<<"::"<<root->value<<"\t";
    inorder(root->rchild);
}
void search(node* root, string data)
{
    if(root == NULL){
        cout<<"No tree is present"<<endl;
    }
    bool flag =1;
    node *temp = root;
    while(flag == 1)
    {
        if(data == temp->key)
        {
            flag = 0;
            break;
        }
        else{
            if(data < temp->key){
                temp = temp->lchild;
            }
            else
                temp = temp->rchild;
        }
        if(temp == NULL){
            break;
        }
    }
    if(flag == 1){
        cout<<"The given key Value is not present in Tree"<<endl;
    }
    else {
        cout<<"The given key value is present in Tree"<<endl;
    }
}
node *del(node *root, string data)
{
    if (root == NULL) {
        cout<<"Key Not Found"<<endl;
        return root;
    }
    else if (data < root->key) {
        root->lchild = del(root->lchild, data);
    }
    else if (data > root->key)
    {
        root->rchild = del(root->rchild, data);
    }
    else
    {
        if (root->lchild == NULL && root->rchild == NULL) {
            root = NULL;
        }
        else if (root->rchild == NULL) {
            root = root->lchild;

        }
        else if (root->lchild == NULL) {
            root = root->rchild;
        }
        else {
            node *temp = new node;
            temp = root->rchild;
            while(temp->lchild)
                temp = temp->lchild;
            root->key = temp->key;
            root->value = temp->value;
            root->rchild = del(root->rchild, temp->key);
        }
    }
    return root;
}
node* copy(node *root){
    node* temp = NULL;
    if(root!=NULL)
    {
        temp = new node;
        temp->key = root->key;
        temp->value = root->value;
        temp->lchild = copy(root->lchild);
        temp->rchild = copy(root->rchild);
    }
    return temp;
}
struct node* mirror(node *root){
    node *temp = NULL;
    if(root == NULL)
    {
        return NULL;
    }
    else{
        temp = new node;
        temp->key = root->key;
        temp-> value = root->value;
        temp->lchild = mirror(root->rchild);
        temp->rchild = mirror(root->lchild);
    }
    return temp;
}
void level_order(node* root)
{
    node* temp;
    if(root == NULL)
    {
        return;
    }
    else
    {
        queue <node* > q;
        q.push(root);
        while(!q.empty())
        {
            temp = q.front();
            cout << temp->key<<"::"<<temp->value<<"\t";
            q.pop();
            if(temp->lchild != NULL)
            {
                q.push(temp -> lchild);
            }
            if(temp ->rchild != NULL)
            {
                q.push(temp->rchild);
            }
        }
    }
}
int main() {
    node *root, *copy_root, *mirror_root;
    int choice;
    string data;
    while(1){
        cout<<endl<<"1. Create"<<endl<<"2. Inorder traversal"<<endl<<"3. search a node"<<endl;
        cout<<"4. Copy the tree"<<endl<<"5. Delete a node"<<endl<<"6. Mirror"<<endl;
        cout<<"7. level order"<<endl<<"8. Exit"<<endl<<"Enter your choice:";
        cin>>choice;
        switch(choice) {
            case 1:
                root = create();
                break;
            case 2:
                inorder(root);
                break;
            case 3:
                cout<<"Enter the key to be searched"<<endl;
                cin>>data;
                search(root, data);
                break;
            case 4:
                copy_root = copy(root);
                cout<<"\nCopied tree is\n";
                inorder(copy_root);
                break;
            case 5:
                cout<<"Enter the key to be deleted"<<endl;
                cin>>data;
                root = del(root, data);
                break;
            case 6:
                mirror_root = mirror(root);
                cout<<"\n\nThe mirrored tree is\n";
                inorder(mirror_root);
                break;
            case 7:
                level_order(root);
                break;
            case 8:
                exit(1);
            default:
                cout<<"Enter correct choice"<<endl;
        }
    }
}*/
