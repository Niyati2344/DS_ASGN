#include <stdio.h>
#include<string.h>
struct student{
    int roll_n;
    char name[10];
    int marks;

}s1[10];
void enter_data(struct student arr[10] ,int n );
void display_data(struct student arr[10] ,int n );
int linear_search(struct student arr[10],int n,int item);
int binary_search(struct student arr[10],int n,int item);
void selection_sort(struct student  arr[10],int n);
void bubble_sort(struct student arr[10],int n);
void insertion_sort(struct student arr[10],int n);
int recusive_binary_search(struct student arr[10],int n,int k,int high,int low);
int main() {


        int ch, n, i,index,item;

        while(1){
        printf("\n1.enter data \n2.display \n3.linear search\n4.binary search\n5.selection sort\n6.bubble sort\n7.insertion sort\n8.recusrive binary search\n");
        printf("\nenter a choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("\nenter the number of students : ");
                scanf("%d",&n);
                enter_data(s1,n);
                break;
            case 2:
                display_data(s1,n);
                break;


            case 3:
                printf("\nenter the roll number to b searched : ");
                scanf("%d", &item);
                index = linear_search(s1, n, item);
                if (index == -1) {
                    printf("\n%d not found in array !", item);
                } else {
                    printf("\n%d found at position %d", item, index);
                    printf("roll number : %d\t name : %s\t marks : %d\t",s1[index].roll_n,s1[index].name,s1[index].marks);
                }
                break;
            case 4:
                printf("\nenter the item to b searched : ");
                scanf("%d", &item);
                index=binary_search(s1, n, item);
                if(index==-1){
                    printf("\n%d not found in array !", item);
                }
                else {
                    printf("\n%d found at position %d", item, index);
                    printf("roll number : %d\t name : %s\t marks : %d\t",s1[index].roll_n,s1[index].name,s1[index].marks);
                }
                break;
            case 5:
                selection_sort(s1,n);
                display_data(s1,n);
                break;
            case 6:
                bubble_sort(s1,n);
                display_data(s1,n);
                break;
            case 7:
                selection_sort(s1,n);
                display_data(s1,n);
                break;
            case 8:

                printf("Enter the roll number to be searched : ");
                scanf("%d",&item);
                index=recusive_binary_search(s1,n,item,n-1,0);
                if(index==-1)
                    printf("Not found");
                else {
                    printf("%d present at position %d\n",item, index);
                    printf("roll number : %d\t name : %s\t marks : %d\t",s1[index].roll_n,s1[index].name,s1[index].marks);
                    break;


                }

        }
    }
        return 0;

}
int linear_search(struct student arr[10],int n,int item) {
    int i;
    while(i<n && item!=arr[i].roll_n) {

        i++;
    }
    if(i<n) {
        return i;
    }
    else{
    return -1;
    }
}
int binary_search(struct student arr[],int n,int item){
    int low=0,up=n-1,mid;
    while(low<=up){
        mid=(low+up)/2;
        if(item<arr[mid].roll_n){
            up=mid-1;
        }
        else if (item>arr[mid].roll_n){
            low=mid+1;
        }
        else{
            return mid;
        }

    }

    return -1;
}
void enter_data(struct student arr[],int n ){
    int i;
    for (i=0;i<n;i++){
        printf(" \nroll number : ");
        scanf("%d",&arr[i].roll_n);
        printf(" \nname : ");
        scanf("%s",arr[i].name);
        printf("\n marks : ");
        scanf("%d",&arr[i].marks);
    }
}
void display_data(struct student arr[10] ,int n ){
    int i;
    for(i=0;i<n;i++){
        printf("roll number : %d\t name : %s\t marks : %d\t",arr[i].roll_n,arr[i].name,arr[i].marks);
        printf("\n");
    }
}
void selection_sort(struct student  arr[10],int n){
    int i,min,temp,j,t3;
    char t2[10];
    for(i=0;i<n-1;i++) {

        min = i;

        for (j = i + 1; j < n; j++) {
            if (arr[min].roll_n > arr[j].roll_n) {
                min = j;
            }
        }
        if (min != i) {
            temp = arr[min].roll_n;
            arr[min].roll_n = arr[i].roll_n;
            arr[i].roll_n = temp;
            strcpy(t2,arr[i].name);
            strcpy(arr[i].name,arr[min].name);
            strcpy(arr[min].name,t2);
            t3=arr[i].marks;
            arr[i].marks=arr[min].marks;
            arr[min].marks=t3;

        }
    }

    }
void bubble_sort(struct student arr[10],int n){
    int i,j,temp,t3;
    char t2[10];
    for(i=0;i<n-1;i++){

        for(j=0;j<n-1-i;j++){
            if(arr[j].roll_n>arr[j+1].roll_n){
                temp = arr[j].roll_n;
                arr[j].roll_n = arr[j+1].roll_n;
                arr[j+1].roll_n = temp;
                strcpy(t2,arr[j].name);
                strcpy(arr[j].name,arr[j+1].name);
                strcpy(arr[j+1].name,t2);
                t3=arr[j].marks;
                arr[j].marks=arr[j+1].marks;
                arr[j+1].marks=t3;

            }
        }
    }

}
void insertion_sort(struct student arr[10],int n){
    int i,j,k,k1;
    char k2[10];
    for (i=0;i<n;i++){
        k=arr[i].roll_n;
        k1=arr[i].marks;
        strcpy(k2,arr[i].name);
        for(j=i-1;j>=0 && k<arr[j].roll_n;j--)
        {
            arr[j+1].roll_n=arr[j].roll_n;
            arr[j+1].marks=arr[j].marks;
            strcpy(arr[j+1].name,arr[j].name);

        arr[j+1].roll_n=k;
        strcpy(arr[j+1].name,k2);
        arr[j+1].marks=k1;

        }
    }
}
int recusive_binary_search(struct student arr[10],int n,int k,int high,int low)
{
    if(low<=high)
    {
        int mid=(low+high)/2;
        if(arr[mid].roll_n==k)
        {
            return mid;
        }
        else if(k<arr[mid].roll_n)
            return recusive_binary_search(s1,n,k,mid-1,0);
        else if(k>arr[mid].roll_n)
            return recusive_binary_search(s1,n,k,n-1,mid+1);
    }
    return -1;
}
